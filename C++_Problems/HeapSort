#include <iostream>  
using namespace std;  

// Function to heapify a subtree rooted with node i which is  
// an index in arr[]. n is the size of the heap  
void heapify(int arr[], int n, int i) {  
    int largest = i; // Initialize largest as root  
    int left = 2 * i + 1; // left child index  
    int right = 2 * i + 2; // right child index  

    // If left child is larger than root  
    if (left < n && arr[left] > arr[largest]) {  
        largest = left;  
    }  

    // If right child is larger than largest so far  
    if (right < n && arr[right] > arr[largest]) {  
        largest = right;  
    }  

    // If largest is not root  
    if (largest != i) {  
        swap(arr[i], arr[largest]); // Swap root with the largest  
        // Recursively heapify the affected subtree  
        heapify(arr, n, largest);  
    }  
}  

// Main function to perform heap sort  
void heapSort(int arr[], int n) {  
    // Build heap (rearrange array)  
    for (int i = n / 2 - 1; i >= 0; i--) {  
        heapify(arr, n, i);  
    }  

    // One by one extract elements from heap  
    for (int i = n - 1; i > 0; i--) {  
        swap(arr[0], arr[i]); // Move current root to end  
        heapify(arr, i, 0); // Call heapify on the reduced heap  
    }  
}  

// Function to print an array  
void printArray(int arr[], int n) {  
    for (int i = 0; i < n; i++) {  
        cout << arr[i] << " ";  
    }  
    cout << endl;  
}  

// Main function  
int main() {  
    int n;  

    cout << "Enter the number of elements in the array: ";  
    cin >> n;  

    int* arr = new int[n]; // Dynamically allocate memory for the array  

    cout << "Enter the elements of the array: ";  
    for (int i = 0; i < n; i++) {  
        cin >> arr[i]; // User inputs the elements  
    }  

    cout << "Original array: ";  
    printArray(arr, n);  

    heapSort(arr, n);  

    cout << "Sorted array: ";  
    printArray(arr, n);  

    delete[] arr; // Free dynamically allocated memory  
    return 0;  
}
