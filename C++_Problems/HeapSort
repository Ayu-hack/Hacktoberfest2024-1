#include <iostream>  
#include <vector>  

using namespace std;  

// Function to heapify a subtree rooted with node i, which is an index in arr[]  
void heapify(vector<int>& arr, int n, int i) {  
    int largest = i; // Initialize largest as root  
    int left = 2 * i + 1; // left = 2*i + 1  
    int right = 2 * i + 2; // right = 2*i + 2  

    // If left child is larger than root  
    if (left < n && arr[left] > arr[largest]) {  
        largest = left;  
    }  

    // If right child is larger than largest so far  
    if (right < n && arr[right] > arr[largest]) {  
        largest = right;  
    }  

    // If largest is not root  
    if (largest != i) {  
        swap(arr[i], arr[largest]); // Swap root and largest  
        heapify(arr, n, largest); // Recursively heapify the affected sub-tree  
    }  
}  

// Function to perform Heap Sort  
void heapSort(vector<int>& arr) {  
    int n = arr.size();  

    // Build heap (rearrange array)  
    for (int i = n / 2 - 1; i >= 0; i--) {  
        heapify(arr, n, i);  
    }  

    // One by one extract an element from heap  
    for (int i = n - 1; i >= 0; i--) {  
        swap(arr[0], arr[i]); // Move current root to end  
        heapify(arr, i, 0); // call max heapify on the reduced heap  
    }  
}  

// Function to print an array  
void printArray(const vector<int>& arr) {  
    for (int num : arr) {  
        cout << num << " ";  
    }  
    cout << endl;  
}  

int main() {  
    int n;  

    cout << "Enter the number of elements: ";  
    cin >> n;  

    vector<int> arr(n);  
    cout << "Enter " << n << " elements: ";  
    for (int i = 0; i < n; i++) {  
        cin >> arr[i];  
    }  

    heapSort(arr); // Sort the array using Heap Sort  

    cout << "Sorted array: ";  
    printArray(arr); // Print the sorted array  

    return 0;  
}
